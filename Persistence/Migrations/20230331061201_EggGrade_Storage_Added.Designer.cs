// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230331061201_EggGrade_Storage_Added")]
    partial class EggGrade_Storage_Added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Barn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EggGradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TemperatureInCelsius")
                        .HasColumnType("real");

                    b.Property<float>("TemperatureInFahrenheit")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EggGradeId");

                    b.ToTable("Barns");
                });

            modelBuilder.Entity("Domain.EggGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GradeEU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeUA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EggGrades");
                });

            modelBuilder.Entity("Domain.EggGradeStorage", b =>
                {
                    b.Property<Guid>("EggGradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EggGradeId", "StorageId");

                    b.HasIndex("StorageId");

                    b.ToTable("EggGradeStorages");
                });

            modelBuilder.Entity("Domain.Feeder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Capacity")
                        .HasColumnType("real");

                    b.Property<float>("Fullness")
                        .HasColumnType("real");

                    b.Property<bool>("IsInUse")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BarnId");

                    b.ToTable("Feeders");
                });

            modelBuilder.Entity("Domain.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsWorking")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Domain.Barn", b =>
                {
                    b.HasOne("Domain.EggGrade", "EggGrade")
                        .WithMany("Barns")
                        .HasForeignKey("EggGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EggGrade");
                });

            modelBuilder.Entity("Domain.EggGradeStorage", b =>
                {
                    b.HasOne("Domain.EggGrade", "EggGrade")
                        .WithMany("Storages")
                        .HasForeignKey("EggGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Storage", "Storage")
                        .WithMany("EggGrades")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EggGrade");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Domain.Feeder", b =>
                {
                    b.HasOne("Domain.Barn", "Barn")
                        .WithMany("Feeders")
                        .HasForeignKey("BarnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Barn");
                });

            modelBuilder.Entity("Domain.Barn", b =>
                {
                    b.Navigation("Feeders");
                });

            modelBuilder.Entity("Domain.EggGrade", b =>
                {
                    b.Navigation("Barns");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("Domain.Storage", b =>
                {
                    b.Navigation("EggGrades");
                });
#pragma warning restore 612, 618
        }
    }
}
